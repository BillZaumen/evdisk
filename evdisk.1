.TH EVDISK "1" "Oct 2019" "evdisk VERSION" "System Administration"
.SH NAME
.PP
evdisk \- create or temporarily mount an encrypted virtual file system
.SH SYNOPSIS
.PP
.B evdisk
.br
.B evdisk
.I TARGET
.br
.B
evdisk [-v] [\-s|\-\-size]
.I SIZE\fB[M|G]\fI
.BI [[--gpghome]\  GPGDIR\fB]\fI
.B [\-r|\-\-recipient]
.I GPG_KEYID
.br
\ \ \ \ \ \ 
.B [\-u|\-\-urandom]
.B [\-c|\-\-create]
.I TARGET
.br
.B evdisk \-\-killAll
.br
.B
evdisk \-\-help
.SH DESCRIPTION
The program
.B evdisk
provides an encrypted virtual file system service represented by a
target directory containing a subdirectory named
.B root
that will be the file system's mount point, a file named
.B encrypted
that contains the file system itself (contained in an ordinary but
encrypted file), and a file
.B key.gpg
that contains a LUKS key encrypted with GPG. The LUKS key is
generated when the encrypted virtual file system is initialized.
The easiest way to initialize the virtual file system is to
either use a desktop action (by pushing the right button of the mouse
when over the EVDisk icon and then selecting "Configure a Directory")
or by using the command
.IP
.B evdisk\ \-\-create
.PP
with no other options. This will bring up a dialog box asking for
the values for various options. The dialog box will contain  a list
of "Recipients GPG Key IDs". Unless the user has created an EVDisk
configuration file as described in
.BR evdisk.conf (5),
the user ids listed will be only those in the current user's key ring
for which private keys are available.  If any additional keys are
desired, those should be added to the configuration file using the
format described in the
.BR evdisk.conf (5)
man page.  This is not necessary when the encrypted virtual file system
is added using the command-line interface.  When the command-line
interface is used, other options must be provided with the
.B --create
option as described below.
.PP
When an encrypted virtual file system is create, the LUKS key that is
generated is 32 characters long, consisting of random printable 7-bit
ASCII characters, and is itself encrypted by GPG.
.PP
Once the target directory
.I TARGET
is initialized, one can mount the virtual file system by using
the commands
.PP
.B \ \ \ \ \ \ evdisk
.br
or
.br
.BI \ \ \ \ \ \ evdisk\  TARGET
.PP
If
.I TARGET
is not provided, a dialog box will appear to ask the user to
select a suitable directory. Otherwise
.I TARGET
is the target directory. Additional dialog boxes may
appear asking for
.B sudo
passwords and/or GPG passphrases. For
.B sudo
passwords, the dialog box may have a title mentioning SSH, although
the text will indicate that the password is for
.BR sudo .
When
.I TARGET
is not provided,
.B sudo
passwords are not cached because
.B evdisk
with no arguments can be started by a desktop action, and multiple
desktop actions can share the same tty or psuedotty.  The GPG
passphrase will be cached (there is no reliable way to prevent this).
To remove all GPG passphrases, run the command
.IP
.B
gpg-connect-agent reloadagent /bye
.PP
Reloading the agent can be done as soon as a window appears indicating
that the virtual file system is being loaded or can be closed.
.PP
Regardless of how
.B evdisk
is started, except when creating a new file system, it will open a
window. This window will initially contain some text indicating that
an encrypted virtual file system is being loaded.  Once ready, the
window will contain a 'close' button that will allow the encrypted
virtual file system to be removed. Closing the file system may fail if
the file system is busy.  One should terminate processes that have
opened any files in this file system or whose current working
directory is a directory in this file system (this includes
terminals), and then try again. If the window is closed by clicking on
the appropriate control on the window's border, or if the
.B evdisk
program is interrupted (e.g., by typing CONTROL-C in its terminal
window), the window may display text indicating the the file system
is busy, and the program will wait until the file system is no longer
busy before actually exiting.
.SH STARTING EVDisk WITH THE WINDOW SYSTEM
.PP
EVDisk is typically installed with a desktop file whose icon can be
clicked to start EVDisk. The user will be asked for a directory
containing an EVDisk virtual file system.  If the mouse is right
clicked, the user can select an option "Configure a Directory" that
open a dialog box that can be used to configure an EVDisk virtual file
system. The directory selected must exist and must not contain any of
EVDisk's expected files:
.BR encrypted ,
.BR key.gpg ,
and the directory
.BR root.
These files and directories will be created.

.SH OPTIONS
.PP
With the
.B \-c
or
.B \-\-create
option, a virtual file system will be create. If there are no other
arguments besides the
.B \-\-create
option, a window will appear that will be used to set any additional
options. Otherwise the target directory must
be provided and must exist, but must not contain the files
.BR encrypted ,
.BR key.gpg ,
or the directory
.BR root .
Once the
.B evdisk
command completes, the target directory will contain a subdirectory
named
.B root
and two ordinary files named
.B encrypted
(which contains an encrypted file system) and
.B key.gpg
(which contains a LUKS key encrypted with GPG). The following options
are applicable when there are any additional arguments (all are
mandatory, except for the
.B \-u
option):
.TP
.BI \-s\  SIZE
.TQ
.BI \-\-size\  SIZE
This option determines the size of the file system.  The argument
.I SIZE
must be a positive integer followed immediately by
.B M
(Megabytes) or
.B G 
(Gigabytes). For example,
.B 50M
and
.B 20G
are valid sizes.  The values corresponding to 1M and 1G are rounded up
to the nearest power of 2 so that 1M is actually 1,048,576 bytes and
1G is actually 1,073,741,824 bytes. On many systems there is a minimum
size for LUKS to work. If the size is too small, one may see an error
message indicating that LUKS formatting failed or that one cannot set up
a mapper.  On PopOS 19.04, the minimum size is 17 MB as of Sept 27, 2019.
This may change at any time (the limits are set by various Linux programs
such as
.B losetup
.B cryptsetup
or
.BR mkfs ).
Typical file systems, of course, are much larger.
.TP
.BI \-r\  GPG_KEYID
.TQ
.BI \-\-recipient\  GPG_KEYID
This option can appear multiple times, but must appear at least once.
It provided an ID that names a GPG key in a form acceptable to the
.B gpg
command using its
.B \-r
option. One key should be provided for each individual that is able
to use the file system.
.TP
.BI \-t\  TYPE
.TQ
.BI \-\-type\  TYPE
The argument
.I TYPE
is the file system type. Valid types can be found by typing
the command
.RS
.IP
ls /sbin/mkfs.*
.RE
.IP
and using a suffix (what follows a period) as the type. The
most useful values are
.BR ext2 ,
.BR ext3 ,
and
.BR ext4 .
The type
.B cramfs
should be avoided. Normally the default is the best choice: LUKS
is specific to Linux so it makes sense to use a standard Linux
file system.  The types
.B exfat
or
.B vfat
might be useful in some special cases, but the file system will
be owned by root, making use awkward, particularly since
.B chown
will not work with these file systems.  If no type is specified the
default for
.B mkfs
will be used.
.TP
.B \-u
.TQ
.B \-\-urandom
This option requests that the file that will contain an encrypted
file system be initialized with random values obtained from
.BR /dev/urandom .
This option may result in very long running times for this command.
It is redundant in cases such as a flash driving being formatted
using a similar option and immediately before
.B evdisk
is used to create a virtual file system. The result of this option,
or its equivalent, is that the virtual file system will be more secure.
.PP
There are two remaining options, and for these a target directory is
not used:
.TP
.B \-\-killAll
While
.B evdisk
will normally unmount file systems, and free loop devices, and remove
unneeded /dev/mapper special files, if for some reason this fails
(e.g., the process was stopped by sending it a SIGKILL signal),
file systems may remain mounted, /dev/mapper files that are unneeded
and unwanted may still exist, and loop devices may remain allocated.
To handle this case, the
.B \-\-killAll
option can be used to remove all evdisk file systems configured by
the user. Such file systems are assumed to be owned by the user
.I USER
if they are located in
.BR /media/ USER
or if the corresponding target directory is owned by the user.
.TP
.B \-?
.TQ
.B \-\-help
A summary of the command-line options will be printed.
.TP
.B -v
This option turns on verbose mode. This will print error messages that
might be created by various commands. It is used primarily for
debugging.
.TP
.BI --homedir\   GPGDIR
This options sets the directory that GPG uses to find its keyring.
If not set the environment variable GNUPGHOME will be used and if this
is not present, the default is the file .gnupg in the user's home
directory.

.SH USE CASE
.PP
The primary use case is one in which a user wishes to keep a backup
of a home directory, or some specific directories, on a flash drive
that the user will carry at all times as an "emergency backup" in case
the house literally burns down or everything in it is stolen. By
using evdisk to set up an encrypted file system, there is little risk
that any third party will be able to access the encrypted file system
as such a third party will not even have the GPG key ring needed to decrypt
the key file
.BR key.gpg .
If there are trusted individuals who should be able to read the disk,
and if they have GPG keys, those GPG keys can be used to set up
.B key.gpg
so that these particular individuals can mount the disk's file system.
While one could keep backup copies of everything in a safe deposit
box, going back and forth is time consuming and files will not be
transferred to such a location with any reasonable frequency due to the
effort and hassle involved.  It is far easier to keep GPG keys in a
safe deposit box as a backup and only transfer a full backup to such
a location occasionally.
.PP
In conjunction with evdisk, one may use rsync to keep the directories
on the encrypted file system in sync with directories on one's computer.
.SH EXAMPLE
Suppose a flash drive was inserted and mounted at
.BR /media/USER/DISK .
The commands
.RS
.PP
.B
mkdir /media/USER/DISK/Backup
.br
.B
evdisk \-s 8G \-r USER_GPG_ID \-u \-\-create /media/USER/DISK/Backup
.RE
.PP
will create an 8 gigabyte encrypted ext4 virtual file system (the
flash drive's file system must support files of the size requested - one
might need an exfat or ext4 file system for a file of this size). To
mount it, use the command
.RS
.PP
.B evdisk
.RE
.PP
(and select
.B /media/USER/DISK/Backup
when the first dialog box appears) or use the command
.RS
.PP
.B
evdisk /media/USER/DISK/Backup
.RE
.PP
to explicitly provide the target directory.  The encrypted file
system will be mounted at
.BR /media/USER/DISK/Backup/root .
Files in this file system are reasonably safe: you can take the
disk with you and even if lost, someone would have to break GPG
encryption to recover the key, and the key ring needed for decryption
is not on the this disk.
.PP
.PP
While one can set up LUKS with encrypted keys (each decrypted with a
pass phrase), it is then necessary to transfer the passphrase to the
other individual, and that step is not necessary with EVDisk.  This is
shown in a second example. Suppose an employee of a company wants to
use EVDisk to store a backup copy of files kept on a laptop and that the
company provides a public GPG key. The
command
.RS
.PP
.B
evdisk \-s 8G \-r USER_GPG_ID \-r COMPANY-GPG_ID \\
.br
.B
\ \ \ \ \-u \-\-create /media/USER/DISK/Backup
.RE
.PP
will encrypt the LUKS key so that it can be used with either of the
two GPG (private) keys. Alternatively, one can put the fingerprint
of the company's public key in the configuration file
.BR ~/.config/evdisk.conf ,
prefaced with a
.B +
if the key should be used by default and a
.B -
if the key should not be used by default. The key must be stored on
the user's key ring. Then when the GUI is used to set up an encrypted
virtual file system, the recipient's table includes the company's user
id in textual form (this is looked up using the fingerprint as a
key). When a configuration file contains the appropriate GPG
fingerprint, one can use a desktop action to start EVDisk or
alternative use the command
.RS
.PP
.B
evdisk \-\-create
.RE
.PP
to start EVDisk in the appropriate mode.
.PP
The command
.RS
.PP
.B
gpg \-k \-\-fingerprint
.RE
.PP
will print the public key ring, displaying fingerprints as a series of
groups of four hexadecimal digits preceding the user id.  If the
company's email address is
.BR xxx@yyy.com ,
then
.RS
.PP
.B
gpg \-k \-\-fingerprint xxx@yy.com
.RE
.PP
will show the fingerprint for this email address alone.
.SH FILES
.PP
.BI /dev/loop N
(where
.I N
is a small non-negative integer) provides a loopback device.
.PP
.BI /dev/mapper/evdisk\- PID
(where
.I PID
is the process ID for the current
.B evdisk
process) provides the mapper device used to decrypt a LUKS file system.
.PP
.IB TARGET /root
is the mount point for the file system provided by
.BR evdisk .
.PP
.IB TARGET /key.gpg
contains a GPG encrypted LUKS key.
.PP
.IB TARGET /encrypted
(where
.I TARGET
is the directory passed to
.B evdisk
as its final argument or the directory selected using a dialog box)
contains an ordinary file storing the data for the file system that
.B evdisk
will provide.
.SH EXIT STATUS
.PP
The exit codes are
.TP
0
for normal termination.
.TP
1
for abnormal termination.
.SH FILES
.B ~/.config/evdisk.conf
.B /usr/bin/evdisk
.B /usr/share/evdisk/evdisk.jar
.B /usr/share/doc/evdisk/copyright
.B /usr/share/doc/evdisk/changelog.gz
.B /usr/share/doc/evdisk/changelog.Debian.gz
.SH AUTHOR
Written by Bill Zaumen
.SH COPYRIGHT
Copyright \(co 2019 Bill Zaumen.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
.br
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
.SH SEE ALSO
.PP
.BR evdisk.conf (5)
.BR cryptsetup (1)
.BR dd (1)
.BR fallocate (1)
.BR gpg (1)
.BR java (1)
.BR locate (1)
.BR losetup (1)
.BR mlocate (1)
.BR mount (1)
.BR rsync (1)
.BR sudo (1)
.BR umount (1)
\"  LocalWords:  EVDISK evdisk br fB fI GPG KEYID urandom killAll gpg
\"  LocalWords:  subdirectory LUKS fITARGET sudo tty psuedotty TP TQ
\"  LocalWords:  unmount decrypt rsync mkdir GPGID exfat Zaumen GPLv
\"  LocalWords:  GPL cryptsetup fallocate losetup umount reloadagent
\"  LocalWords:  cramfs vfat chown mkfs SIGKILL loopback PID IB PopOS
\"  LocalWords:  mlocate EVDisk EVDisk's decrypted conf config
